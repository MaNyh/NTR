/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  plus                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     rhoPimpleFoam;

startFrom       latestTime;

startTime       __DELTAT__;

stopAt		    endTime;

endTime         10;

deltaT          __DELTAT__;

writeControl    timeStep;

writeInterval   __WRITEINTERVAL__;

purgeWrite      3;

writeFormat     ascii;

writePrecision  16;

writeCompression off;

timeFormat      general;

timePrecision   16;

runTimeModifiable true;

adjustTimeStep  __ADUSTABLETIMESTEP__;

maxCo           0.4; //maximale courant number

libs (
"libfieldFunctionObjects.so"
"libsampling.so"
"libAdvectiveFields.so"
"libWaveTransmissiveFields.so"
"libDFSEM_WaveTransmissive_synthWake.so"
);


functions
{

    #includeFunc  flowRatePatch(name=INLET)
    #includeFunc  flowRatePatch(name=OUTLET)
    #includeFunc residuals

    outlet_turbulence_probe
    {

     	type            probes;
        libs            ("libsampling.so");

        enabled         true;
        log             true;
        timeStart       0;
        timeEnd         1000;
        writeControl    timeStep;
        writeInterval   1;
        writeFields     off;
        fields (
                    U {
                        mean on;
                        prime2Mean on;
                        base time;
                    }
                );
        probeLocations
        (
        (0.2187783122062683 0.1199941337108612 0.019999999552965164)
        )
    }
    inlet_turbulence_probe
    {

     	type            probes;
        libs            ("libsampling.so");

        enabled         true;
        log             true;
        timeStart       0;
        timeEnd         1000;
        writeControl    timeStep;
        writeInterval   1;
        writeFields     off;
        fields (
                    U {
                        mean on;
                        prime2Mean on;
                        base time;
                    }
                );
        probeLocations
        (
        (-0.08818254619836807 -0.08679172396659851 0.019999999552965164)
        )
    }

    outlet_scalarfields
    {
        type            surfaceFieldValue;
        libs            ("libfieldFunctionObjects.so");
        enabled         true;
        log             true;
        valueOutput     false;
        timeStart       0;
        timeEnd         1000;

        writeControl    timeStep;
        writeInterval    1;
        writeFields     off;
        regionType      patch;
        name            OUTLET;
        surfaceFormat   none;
        operation       areaAverage;
        fields
        (
            p
            T
        );
    }
    inlet_scalarfields
    {
        type            surfaceFieldValue;
        libs            ("libfieldFunctionObjects.so");
        enabled         true;
        log             true;
        valueOutput     false;
        timeStart       0;
        writeControl    timeStep;
        writeInterval   1;
        writeFields     off;
        regionType      patch;
        name            INLET;
        surfaceFormat   none;
        operation       areaAverage;
        fields
        (
            p
            T
        );
    }


    sclice
    {

        type        			    surfaces;
        interpolationScheme 		cellPoint;
        functionObjectLibs 			( "libsampling.so" );
        enabled         			false;
        writeControl   			    timeStep;
        writeInterval  			    100; // the surface will be stored every 2nd time step (for example)
        surfaceFormat    			vtk;
        surfaces
        (
            zCut
            {
            // Cutingplane using iso surface
            type            cuttingPlane;
            planeType       pointAndNormal;
            pointAndNormalDict
            {
                basePoint       (0.06645314767956734 0.015346363186836243 0.02);
                normalVector    (0.0 0.0 1.0);
            }
            interpolate     true;
            }
        );

        fields
        (
            U
        );
    }


    fieldAverage
    {
        type            	  fieldAverage;
       	writeControl    	  writeTime;
        restartOnOutput           false;
        restartOnRestart          false;
	    enabled			  true;

        fields
        (
        /*
          wallShearStress
          {
            mean true;
            prime2Mean false;
            base time;
          }
         */
          rho
          {
            mean true;
            prime2Mean false;
            base	time;
          }
	      U
          {
                mean        true;
                prime2Mean  true;
                base        time;
          }

          p
          {
              mean        true;
              prime2Mean  true;
              base        time;
          }
          T
          {
              mean        true;
              prime2Mean  true;
              base        time;
          }
          nut
          {
                mean        true;
	            prime2Mean  true;
                base        time;
          }
          alphat
          {
             mean 	true;
             prime2Mean	true;
             base 	time;
	      }

	    );
    }


}

// ************************************************************************* //
